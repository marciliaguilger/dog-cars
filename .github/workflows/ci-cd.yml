name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  APP_NAME: cars
  JAVA_VERSION: '18'
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build and test
        run: ./gradlew clean build --no-daemon

      - name: Upload build reports (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-reports
          path: |
            build/reports/**
            build/test-results/**

  docker-publish:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: github-actions-${{ env.APP_NAME }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          docker build -t $ECR_REPOSITORY:latest -t $ECR_REPOSITORY:${IMAGE_TAG} .

      - name: Tag image with ECR registry
        run: |
          docker tag $ECR_REPOSITORY:${IMAGE_TAG} $ECR_REGISTRY/$ECR_REPOSITORY:${IMAGE_TAG}
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Push image to ECR
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${IMAGE_TAG}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy-eks:
    needs: docker-publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: github-actions-${{ env.APP_NAME }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.29.0'

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Apply K8s manifests
        run: |
          kubectl apply -f k8s/

      - name: Update image to new version
        env:
          DEPLOYMENT: ${{ secrets.K8S_DEPLOYMENT_NAME }}
          CONTAINER: ${{ secrets.K8S_CONTAINER_NAME }}
        run: |
          kubectl set image deployment/${DEPLOYMENT} ${CONTAINER}=${ECR_REGISTRY}/${{ secrets.ECR_REPOSITORY }}:${IMAGE_TAG}
          kubectl rollout status deployment/${DEPLOYMENT} --timeout=120s


