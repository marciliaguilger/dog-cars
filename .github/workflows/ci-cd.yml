name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  APP_NAME: cars
  JAVA_VERSION: '17'
  AWS_REGION: 'us-east-1'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Give execute permission to gradlew
        run: chmod +x ./gradlew

      - name: Build and test with Gradle
        run: ./gradlew clean build --no-daemon

      - name: Check if JAR was created
        run: |
          ls -la build/libs/
          if [ $(find build/libs -name "*.jar" | wc -l) -eq 0 ]; then
            echo "JAR file not found!"
            exit 1
          else
            echo "JAR file found:"
            find build/libs -name "*.jar"
          fi

      - name: Upload build reports (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-reports
          path: |
            build/reports/**
            build/test-results/**

  docker-publish:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set ECR variables
        run: |
          echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV
          echo "ECR_REPOSITORY=dog/dog-cars" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Build, tag, and push Docker image to Amazon ECR
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Escape secrets for sed
        run: |
          echo "DB_NAME_ESCAPED=$(echo '${{ secrets.DB_NAME }}' | sed 's/[[\.*^$/]/\\&/g')" >> $GITHUB_ENV
          echo "DB_USER_ESCAPED=$(echo '${{ secrets.DB_USER }}' | sed 's/[[\.*^$/]/\\&/g')" >> $GITHUB_ENV
          echo "DB_PASSWORD_ESCAPED=$(echo '${{ secrets.DB_PASSWORD }}' | sed 's/[[\.*^$/]/\\&/g')" >> $GITHUB_ENV
          echo "DB_HOST_ESCAPED=$(echo '${{ secrets.DB_HOST }}' | sed 's/[[\.*^$/]/\\&/g')" >> $GITHUB_ENV

      - name: Replace Env Variables in deployment.yaml
        run: |
          sed -i "s|DB_NAME_PLACEHOLDER|$DB_NAME_ESCAPED|g" ./k8s/deployment.yaml
          sed -i "s|DB_USER_PLACEHOLDER|$DB_USER_ESCAPED|g" ./k8s/deployment.yaml
          sed -i "s|DB_PASSWORD_PLACEHOLDER|$DB_PASSWORD_ESCAPED|g" ./k8s/deployment.yaml
          sed -i "s|DB_HOST_PLACEHOLDER|$DB_HOST_ESCAPED|g" ./k8s/deployment.yaml
          sed -i "s|AWS_ACCOUNT_ID|${{ secrets.AWS_ACCOUNT_ID }}|g" ./k8s/deployment.yaml

  deploy-eks:
    needs: docker-publish
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: github-actions-${{ env.APP_NAME }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set ECR variables
        run: |
          echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV
          echo "ECR_REPOSITORY=dog-cars" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Apply K8s manifests
        run: kubectl apply -f k8s/

      - name: Update image to new version
        run: |
          kubectl set image deployment/dog-cars dog-cars=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -n dog-cars
          kubectl rollout status deployment/dog-cars -n dog-cars --timeout=120s
